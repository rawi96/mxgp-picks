datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   includeRelationFromFields = true
// }
model User {
  id                      String             @id @default(uuid())
  email                   String             @unique
  username                String             @unique
  score                   Int                @default(0)
  scorePerRace            String?
  password                String
  isAdmin                 Boolean
  isVerified              Boolean           @default(false)
  verifyToken             String?
  resetPasswordToken      String?
  picks                   Pick[]
}

model Pick {
  id                 String             @id @default(uuid())
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
  race               Race               @relation(fields: [raceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  raceId             String             
  result             Result             @relation(fields: [resultId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resultId           String             @unique
}

model Rider {
  id                 String             @id @default(uuid())
  firstname          String         
  lastname           String             
  numberplate        Int      
  firsts             Result[]          @relation("first")
  seconds            Result[]          @relation("second")
  thirds             Result[]          @relation("third")
  fourth             Result[]          @relation("fourth")
  fifths             Result[]          @relation("fifth")
  wildcards          Result[]          @relation("wildcard")
}
model Race {
  id                String             @id @default(uuid())
  title             String         
  date              DateTime             
  factor            Int          
  wildcardPos       Int  
  raceResult        RaceResult? 
  picks             Pick[]
}
model RaceResult {
  id                String         @id @default(uuid())
  race              Race           @relation(fields: [raceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  raceId            String         @unique
  result            Result         @relation(fields: [resultId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resultId          String         @unique
}
model Result {
  id              String             @id @default(uuid())
  first           Rider?             @relation("first", fields: [firstId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  firstId         String?             
  second          Rider?              @relation("second", fields: [secondId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  secondId        String?             
  third           Rider?              @relation("third", fields: [thirdId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  thirdId         String?             
  fourth           Rider?              @relation("fourth", fields: [fourthId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  fourthId         String?             
  fifth           Rider?              @relation("fifth", fields: [fifthId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  fifthId         String?             
  wildcard        Rider?              @relation("wildcard", fields: [wildcardId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  wildcardId      String?             
  raceResult      RaceResult?
  pick            Pick?
}
